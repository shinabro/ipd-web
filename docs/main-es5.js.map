{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/city-state-component/city-state-component.component.ts","webpack:///src/app/city-state-component/city-state-component.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AppComponent","http","title","numOfTravelers","cityUrl","WIKIPEDIA_URL","url","cities","get","console","log","basePrice","isInternational","getCities","travelWithSpouse","selector","templateUrl","styleUrls","AppModule","declarations","imports","providers","bootstrap","CityStateComponentComponent","environment","production","bootstrapModule","err","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component } from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport { City } from './city';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'IPD Travel App';\n  travelDate:Date;\n  isInternational:boolean;\n  numOfTravelers=1;\n  travelerName:string;\n  travelWithSpouse:boolean;\n\n  private cityUrl = 'secure.geobytes.com/AutoCompleteCity?key=7c756203dbb38590a66e01a5a3e1ad96&callback=?&q=\"'\n  private WIKIPEDIA_URL = 'https://en.wikipedia.org/w/api.php';\n\n  constructor(private http: HttpClient) {}\n\n\n\n  res;\n\n  getCities() {\n    let url = \"https://raw.githubusercontent.com/dr5hn/countries-states-cities-database/master/cities.json\";\n\n    let cities = this.http.get<City[]>(url);\n\n    // Pass the key for your callback (in this case 'callback')\n    // as the second argument to the jsonp method\n\n      console.log(cities);\n\n  }\n  getPrice() : number {\n    // if international travel, price is 50% more\n    let basePrice = this.isInternational ? 150 : 100;\n    this.getCities();\n    if (this.travelWithSpouse) {\n      return basePrice * (this.numOfTravelers += 1);\n    }\n    return basePrice * this.numOfTravelers;\n  }\n}\n","<form>\n    <div class=\"form-group\">\n        <label for=\"travelerName\">Traveler Name</label>\n        <input type=\"text\" class=\"form-control\" name=\"travelerName\" [(ngModel)]='travelerName'>\n    </div>\n    <div class=\"form-group\">\n        <label for=\"travelDate\">Date of Travel</label>\n        <input type=\"date\" class=\"form-control\" name=\"travelDate\" [(ngModel)]='travelDate'>\n    </div>\n    <div class=\"form-group\">\n        <label for=\"numOfTravelers\"># of Travlers</label>\n        <input type=\"number\" class=\"form-control\" name=\"travelDate\" [(ngModel)]='numOfTravelers'>\n    </div>\n    <div class=\"form-group form-check\">\n        <input type=\"checkbox\" class=\"form-check-input\" [(ngModel)]='isInternational' name='isInternational'>\n        <label class=\"form-check-label\" for=\"exampleCheck1\">Is International Travel</label>\n    </div>\n    <div class=\"form-group form-check\">\n        <input type=\"checkbox\" class=\"form-check-input\" [(ngModel)]='travelWithSpouse' name='travelWithSpouse'>\n        <label class=\"form-check-label\" for=\"travelWithSpouse\">Travel With Spouse</label>\n    </div>\n</form>\n\n<div class=\"card-body\" *ngIf=\"travelerName\">\n    <h5 class=\"card-title\">Travel Itinary</h5>\n    <p class=\"card-text\">Traveler: {{travelerName}}</p>\n    <p class=\"card-text\">Travel Date: {{travelDate | date}}</p>\n    <p class=\"card-text\">International: {{isInternational }}</p>\n    <p class=\"card-text\">{{(getPrice()) | currency}}</p>\n</div>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientModule, HttpClientJsonpModule } from '@angular/common/http'\nimport { AppComponent } from './app.component';\nimport { CityStateComponentComponent } from './city-state-component/city-state-component.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    CityStateComponentComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpClientModule,\n    HttpClientJsonpModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-city-state-component',\n  templateUrl: './city-state-component.component.html',\n  styleUrls: ['./city-state-component.component.css']\n})\nexport class CityStateComponentComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>city-state-component works!</p>\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}